module ArrayUtils
  use array.Array
  use int.Int

  let insert (x: 'a) (b : array 'a) (idx : int) : array 'a
    requires { 0 <= idx <= b.length }
    ensures { result.length = b.length + 1 }
    ensures { forall i. 0 <= i < idx -> result[i] = b[i] }
    ensures { result[idx] = x }
    ensures { forall i : int. idx <= i < b.length -> result[i+1] = b[i]}
  =
    let l1 = append (sub b 0 idx) (make 1 x) in
    let l2 = (sub b idx (b.length-idx)) in
    append l1 l2

  let function replace (a new : array 'a) (i j : int): array 'a
    requires { 0 <= i <= j <= length a }
    ensures { length result = length a + length new - (j - i) }
    ensures { forall k. 0 <= k < i -> result[k] = a[k] }
    ensures { forall k. i <= k < i + length new -> result[k] = new[k-i] }
    (* this postcondition is not necessary but makes the proof faster *)
    ensures  { forall k. j <= k < length a ->
                        result[i + length new + k - j] = a[k] }
    ensures { forall k. i+length new <= k < i+length new + length a-j ->
                        result[k] = a[k - length new + j - i] }
  = let l1 = append (sub a 0 i) new in
    let l2 = (sub a j (length a - j)) in
    append l1 l2

  let replace_by_one (a : array 'a) (e : 'a) (i j : int): array 'a
    requires { 0 <= i <= j <= length a }
    ensures { length result = length a + 1 - (j - i) }
    ensures { forall k. 0 <= k < i -> result[k] = a[k] }
    ensures { result[i] = e }
    (* this postcondition is not necessary but makes the proof faster *)
    ensures  { forall k. j <= k < length a ->
                        result[i + 1 + k - j] = a[k] }
    ensures { forall k. i+1 <= k < i+1 + length a-j ->
                        result[k] = a[k - 1 + j - i] }
  = replace a (make 1 e) i j

  let predicate weak_array_eq (a b : array 'a) = any bool
    ensures {
      result <->
          length a = length b
       /\ forall i. 0<= i < length a -> a[i]=b[i]
    }

  let map (a : array 'a) (f : 'a -> 'b) : array 'b
    ensures { length result = length a }
    ensures { forall i. 0 <= i < length a -> result[i] = f a[i] }
  =
    if length a = 0 then empty() else
    let b = make (length a) (f a[0]) in
    for i = 1 to length a - 1 do
      invariant { forall j. 0 <= j < i -> b[j] = f a[j] }
      b[i] <- f a[i]
    done;
    b

  let function rev (a : array 'a) : array 'a
    ensures { length a = length result }
    ensures { forall i. 0 <= i < length a -> result[i] = a[length a - i - 1] }
  =
    let b = copy a in
    for i = 0 to length a - 1 do
      invariant { forall j. 0 <= j < i -> b[j] = a[length a - j - 1] }
      b[i] <- a[length a - i - 1]
    done;
    b
end

module ArraySort
  use int.Int
  use array.Array
  use array.ArraySwap

  type elt
  predicate le elt elt
  clone array.Sorted with type elt = elt, predicate le = le

  val le (a b : elt) : bool ensures { result <-> le a b }
  axiom le_trans : forall a b c. le a b /\ le b c -> le a c
  axiom le_refl : forall a. le a a
  axiom le_lin : forall a b. le a b \/ le b a

  let rec lemma sort_aux (a : array elt)
    requires { forall i. 0 <= i < length a - 1 -> le a[i] a[i+1] }
    ensures { forall i j. 0 <= i < j < length a -> le a[i] a[j] }
    variant {length a}
  = if length a > 0 then begin
      sort_aux (sub a 0 (length a - 1));
      assert { forall i j. 0 <= i < j < length a - 1 -> le a[i] a[j] };
    end

  let lemma sort_aux2 (a b : array elt) (i j : int) (x : elt)
    requires { 0 <= i <= j < length a }
    requires { exchange a b i j }
    ensures { (exists k. 0 <= k < length a /\ a[k] = x)
          <-> (exists k. 0 <= k < length b /\ b[k] = x) }
  = ()

  let rec sort (a : array elt) : array elt
    ensures { sorted result }
    ensures { length a = length result }
    ensures { forall j. 0 <= j < length a ->
                   (exists i. 0 <= i < length a /\ result[i] = a[j])
                 /\(exists i. 0 <= i < length a /\ result[j] = a[i]) }
  =
    let res = copy a in
    for i = 0 to length res - 1 do
      invariant { forall j k. 0 <= j < i <= k < length res -> le res[j] res[k] }
      invariant { forall n. 0 <= n < i - 1 -> le res[n] res[n+1] }
      invariant {forall j k. 0 <= j < i <= k < length res -> le res[j] res[k]}
      invariant { forall j. 0 <= j < length a ->
                   (exists i. 0 <= i < length a /\ res[i] = a[j])
                 /\(exists i. 0 <= i < length a /\ res[j] = a[i]) }
      let ref idx_min = i in
      for j = i+1 to length res - 1 do
        invariant { 0 <= idx_min < length res }
        invariant { idx_min >= i } (* needed for external invariant (csort_aux_1) *)
        invariant { forall k. i <= k < j <= length res -> le res[idx_min] res[k] }
        if le res[j] res[idx_min] then
          begin
            idx_min <- j;
          end
      done;
      swap res i idx_min;
    done;
    res

end
