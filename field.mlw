module Intf
    use real.RealInfix    use int.Int    use real.FromInt

    type t

    function real (q:t) : real    meta coercion function real

    predicate equal (a b:t) = (a.real = b.real)

    val (=) (a:t) (b:t) : bool ensures { equal a b = result }

    axiom equal_is_eq: forall a b. equal a b -> a = b

    predicate (<=) (a:t) (b:t) = (a.real <=. b.real)
    predicate (<) (a:t) (b:t) = (a.real <. b.real)

    val (<=) (a:t) (b:t) : bool ensures { result = (a <= b) }
    val (<) (a:t) (b:t) : bool ensures { result = (a < b) }

    use real.Abs
    val abs (a:t) : t
    ensures { result.real = abs a.real }

    type ord = Eq | Lt | Gt
    val compare (a:t) (b:t) : ord
        ensures {
            match result with
            | Eq -> equal a b | Lt -> a < b | Gt -> b < a
            end
        }

    val function (+) (a:t) (b:t) : t ensures { a.real +. b.real = result.real }
    val function (-) (a:t) (b:t) : t ensures { a.real -. b.real = result.real }
    val function (*) (a:t) (b:t) : t ensures { a.real *. b.real = result.real }
    val function neg (a:t) : t ensures { result.real = 0.0 -. (a.real) }

    val function (/) (a:t) (b:t) : t
        requires { b.real <> 0.0 }
        ensures { result.real = a.real /. b.real }

    use real.Truncate

    val of_int (i : int) : t ensures { result.real = from_int i }

    val truncate (a:t) : int ensures { result = truncate a.real }
    val floor (a:t) : int ensures { result = floor a.real }
    val ceil (a:t) : int ensures { result = ceil a.real }

    let non_empty = of_int 0

    type op = {
      ghost ur: real -> real;
      uq: t -> t;
    }
    invariant { forall v. ur (real v) = real (uq v) }
    by { ur = (fun x -> x); uq = (fun q -> q);  }

    predicate si (f : op) = forall r r'. r <. r' -> (f.ur r) <. (f.ur r')

    predicate sd (f : op) = forall r r'. r <. r' -> (f.ur r) >. (f.ur r')

    predicate nsi (f : op) = forall r r'. r <=. r' -> (f.ur r) <=. (f.ur r')

    predicate nsd (f : op) = forall r r'. r <=. r' -> (f.ur r) >=. (f.ur r')
end
