module Skel
  use int.Int
  use bool.Bool
  use real.RealInfix
  use option.Option
  use array_utils.ArrayUtils

  use interval.BoundInterval
  use interval.BoundUnion
  scope Make
  use array.Array

  let predicate bound_unbound_disj_down (udown : option V.t) (bu : bound_union)
  = any bool ensures { result <-> (
     bu.a.length > 0 ->
       match udown with
       | None -> true
       | Some x -> V.(x < union_inf bu \/
                     (x = union_inf bu /\ not bu.a[0].lower_closed)
                     \/ (x = union_inf bu /\ (bu.a[0].lower=bu.a[0].upper)))
       end
     )}

  let predicate bound_unbound_disj_up (uup : option V.t) (bu : bound_union)
  = any bool ensures { result <-> (
     bu.a.length > 0 ->
       let i = bu.a.length - 1 in
       match uup with
       | None -> true
       | Some x -> V.(union_sup bu < x \/
                     (x = union_sup bu /\ not bu.a[i].upper_closed)
                     \/ (x = union_sup bu /\ (bu.a[i].upper=bu.a[i].lower)))
       end
     )}

  let predicate unbound_unbound_disj (udown uup : option V.t) (bu : bound_union) =
    any bool ensures { result <->
       match udown, uup with
       | Some a, Some b ->
          if length bu.a = 0 then
            V.(a <= b)
          else if V.(union_sup bu = union_inf bu) then
            V.(a <= b /\ (a = b -> real a = real (union_inf bu)))
          else true
       | _, _ -> true
       end
    }

  let predicate unique_repr_of_all (udown uup : option V.t) (bu : bound_union)
  = any bool ensures { result <->
      match udown, uup with
      | Some a, Some b ->
          if V.(a = b /\ bu.a.length > 0) then a.V.real = 0.0
          else true
      | _, _ -> true
  end }

  let predicate bound_unbound_disj (udown uup : option V.t) (bu : bound_union)
  = any bool ensures { result <->
     bound_unbound_disj_down udown bu /\ bound_unbound_disj_up uup bu
  }

  type u = {
    unbound_down : option V.t;
    unbound_up : option V.t;
    bu : bound_union
  } invariant {
        bound_unbound_disj unbound_down unbound_up bu
     /\ unbound_unbound_disj unbound_down unbound_up bu
     /\ unique_repr_of_all unbound_down unbound_up bu
  }

  let x : real = 1.0

  predicate mem_unbound_down (x:real) (l : option V.t)
  = match l with None -> false | Some y -> x <. y.V.real end

  predicate mem_unbound_up (x:real) (r : option V.t)
  = match r with None -> false | Some y -> x >. y.V.real end

  predicate untyped_mem (x : real) (unbound_down unbound_up : option V.t)
                                   (bu : bound_union)
  =
       mem_unbound_down x unbound_down
    \/ mem_unbound_up x unbound_up
    \/ mem_union x bu


  predicate mem (x:real) (l:u)
  = untyped_mem x l.unbound_down l.unbound_up l.bu


  let predicate gobbles_up (uup : option V.t) (bu : bound_union) =
    any bool ensures { result <-> length bu.a > 0 /\
          let i = length bu.a - 1 in
          match uup with None->false | Some l -> l.V.real .<- bu.a[i] end }

  let predicate gobbles_down (udn : option V.t) (bu : bound_union) =
      any bool ensures { result <-> length bu.a > 0 /\
          match udn with None -> false | Some l -> l.V.real ->. bu.a[0] end }

  let lemma tmp_aux (bu : bound_union) (udn : option V.t)
    requires { gobbles_down udn bu }
    ensures { forall x. (mem_union x bu \/ mem_unbound_down x udn)
                    <-> (gen_mem_sub_union x bu.a 1 (length bu.a)
                         \/ mem_unbound_down x udn) }
    =
      ()

  let lemma tmp_aux' (bu : bound_union) (udn : option V.t)
    requires { gobbles_up udn bu }
    ensures { forall x. (mem_union x bu \/ mem_unbound_up x udn)
                    <-> (gen_mem_sub_union x bu.a 0 (length bu.a - 1)
                         \/ mem_unbound_up x udn) }
    =
      ()

  let lemma extend_from_down_core (down : option V.t) (b : bound_union) (x : real)
    requires { not gobbles_down down b }
    requires { not bound_unbound_disj_down down b }
    requires {  mem_unbound_down x (Some b.a[0].upper) }
    ensures { mem_r_interval x b.a[0] \/ mem_unbound_down x down }
  = ()

  let lemma extend_from_up_core (up : option V.t) (b : bound_union) (x : real)
    requires { not gobbles_up up b }
    requires { not bound_unbound_disj_up up b }
    requires {  mem_unbound_up x (Some b.a[length b.a - 1].lower) }
    ensures { mem_r_interval x b.a[length b.a - 1] \/ mem_unbound_up x up }
  = ()

  let function extend_from_down (down up : option V.t) (b : bound_union)
    requires { not gobbles_down down b }
    requires { not bound_unbound_disj_down down b }
    ensures {
      let (down', up', b') = result in
          (forall x. untyped_mem x down' up' b' <-> untyped_mem x down up b)
       /\ (bound_unbound_disj_down down' b')
       /\ ((bound_unbound_disj_up up b) -> (bound_unbound_disj_up up' b'))
    }
  =
    assert { forall x. mem_r_interval x b.a[0] \/ mem_unbound_down x down <->
         ((b.a[0].upper_closed /\ x = b.a[0].upper)
           \/ mem_unbound_down x (Some b.a[0].upper))};
    if b.a[0].upper_closed then
      (Some b.a[0].upper, up, {a=replace b.a (make 1 (singleton_mk b.a[0].upper)) 0 1})
    else
      (Some b.a[0].upper, up, {a=replace b.a (empty()) 0 1})

  let function extend_from_up (down up : option V.t) (b : bound_union)
    requires { not gobbles_up up b }
    requires { not bound_unbound_disj_up up b }
    ensures { (
      let (down', up', b') = result in
          (forall x. untyped_mem x down' up' b' <-> untyped_mem x down up b)
       /\ (bound_unbound_disj_up up' b')
       /\ (bound_unbound_disj_down down b -> bound_unbound_disj_down down' b'))
    }
  =
    let i = length b.a - 1 in
    assert { forall x. mem_r_interval x b.a[i] \/ mem_unbound_up x up <->
         ((b.a[i].lower_closed /\ x = b.a[i].lower)
           \/ mem_unbound_up x (Some b.a[i].lower))};
    if b.a[i].lower_closed then
      (down, Some b.a[i].lower, {a=replace b.a (make 1 (singleton_mk b.a[i].lower)) i (i+1)})
    else
      (down, Some b.a[i].lower, {a=replace b.a (empty()) i (i+1)})

  let function fix_untyped_up (unbound_down unbound_up : option V.t) (bu : bound_union)
    ensures { forall x. let (d', u', bu') = result in
                        untyped_mem x d' u' bu' <->
                        untyped_mem x unbound_down unbound_up bu }
    ensures { let (d', u', bu') = result in
              bound_unbound_disj_up u' bu'
              /\ (bound_unbound_disj_down unbound_down bu -> bound_unbound_disj_down d' bu') }
  =
    let ref var_bu = {a = Array.copy bu.a} in
    let ref var_d = unbound_down in let ref var_u = unbound_up in
    while gobbles_up unbound_up var_bu do
      variant { length var_bu.a }
      invariant { forall i. 0 <= i < length var_bu.a - 1 ->
                            var_bu.a[i]<<var_bu.a[i+1] }
      invariant { forall x. untyped_mem x var_d var_u var_bu
                        <-> untyped_mem x unbound_down unbound_up bu }
      invariant { bound_unbound_disj_down unbound_down bu ->
                  bound_unbound_disj_down var_d var_bu }
      let i = length var_bu.a - 1 in
      var_bu <- {a=replace var_bu.a (empty()) i (i+1)}
    done;
    if not bound_unbound_disj_up var_u var_bu then begin
      let (var_d', var_u', var_bu') = extend_from_up var_d var_u var_bu
      in (var_d, var_u, var_bu) <- (var_d', var_u', var_bu')
    end;
    (var_d, var_u, var_bu)

  let function fix_untyped_down (unbound_down unbound_up : option V.t) (bu : bound_union)
    ensures { forall x. let (d', u', bu') = result in
                        untyped_mem x d' u' bu' <->
                        untyped_mem x unbound_down unbound_up bu }
    ensures { let (d', u', bu') = result in
              bound_unbound_disj_down d' bu'
              /\ (bound_unbound_disj_up unbound_up bu -> bound_unbound_disj_up u' bu') }
  = let ref var_bu = {a = Array.copy bu.a} in
    let ref var_d = unbound_down in let ref var_u = unbound_up in
    while gobbles_down unbound_down var_bu do
      variant { length var_bu.a }
      invariant { forall i. 0 <= i < length var_bu.a - 1 ->
                            var_bu.a[i]<<var_bu.a[i+1] }
      invariant { forall x. untyped_mem x var_d var_u var_bu
                        <-> untyped_mem x unbound_down unbound_up bu }
      invariant { bound_unbound_disj_up unbound_up bu ->
                  bound_unbound_disj_up var_u var_bu }
      let i = 0 in
      var_bu <- {a=replace var_bu.a (empty()) i (i+1)}
    done;
    if not bound_unbound_disj_down var_d var_bu then begin
      let (var_d', var_u', var_bu') = extend_from_down var_d var_u var_bu in
      (var_d, var_u, var_bu) <- (var_d', var_u', var_bu');
    end;
    (var_d, var_u, var_bu)

  let function fix_untyped_bound (unbound_down unbound_up : option V.t) (bu : bound_union)
    ensures { let (d', u', b') = result in
              forall x. untyped_mem x d' u' b' <->
                        untyped_mem x unbound_down unbound_up bu }
    ensures { let (d', u', b') = result in bound_unbound_disj d' u' b' }
  =
    let d, u, b = fix_untyped_up unbound_down unbound_up bu in
    let d, u, b = fix_untyped_down d u b in
    d,u,b


  let function fix_untyped_unbound (unbound_down unbound_up : option V.t) (bu : bound_union)
    requires { bound_unbound_disj unbound_down unbound_up bu }
    ensures { let (d, u, b) = result in
      (forall x. untyped_mem x d u b <->
                 untyped_mem x unbound_down unbound_up bu)
      /\ unbound_unbound_disj d u b
      /\ bound_unbound_disj d u b
      /\ unique_repr_of_all d u b
    }
  =
    let d, u, b = (unbound_down, unbound_up, { a = copy bu.a }) in
    if b.a.length > 0 && V.(union_sup b <> union_inf b) then
        d, u, b
    else match d, u with
      | Some l, Some r ->
         if V.(l < r) then d, u, b
         else if V.(l = r) then
          if b.a.length > 0 then
            let s = { a = make 1 (singleton_mk V.(of_int 0))} in
            V.(Some (of_int 0), Some (of_int 0), s)
          else V.(Some l, Some l, empty_union())
        else
          let hehe = { a = make 1 (singleton_mk V.(of_int 0))} in
          V.(Some (of_int 0), Some (of_int 0), hehe)
      | _, _ -> d, u, b
    end


  let function fix_untyped (unbound_down unbound_up : option V.t) (bu : bound_union)
    ensures { forall x. mem x result <->
                        untyped_mem x unbound_down unbound_up bu }
  =
    let d, u, b = fix_untyped_bound unbound_down unbound_up bu in
    let d', u', b' = fix_untyped_unbound d u b in
    {unbound_down=d'; unbound_up=u'; bu=b'}


  let function singleton (q:V.t) : u
    ensures { forall x. mem x result <-> q.V.real = x }
  =
    let r = {
      unbound_down = None; unbound_up = None;
      bu = {a=Array.make 1 (singleton_mk q)}
    } in
    begin (* these hints are not necessary but make AltErgo faster for this specif *)
      assert { forall x. (mem x r <-> mem_r_interval x (singleton_mk q))};
      assert { forall x. (mem_r_interval x (singleton_mk q)) <-> x = q};
      r
    end

  let function empty_u () : u
    ensures { forall x. not mem x result }
  = {unbound_down=None; unbound_up=None; bu=empty_union()}

  let function all_u () : u
    ensures { forall x. mem x result }
  = V.{unbound_down=Some (of_int 0); unbound_up=Some (of_int 0);
       bu={ a = make 1 (singleton_mk V.(of_int 0)) } }

  let function gt (q:V.t) : u
    ensures { forall x. mem x result <-> x >. q.V.real }
  =
    {unbound_down = None; bu = empty_union(); unbound_up = Some q}

  let ge (q:V.t) : u
    ensures { forall x. mem x result <-> x >=. q.V.real }
  =
    {unbound_down=None;  bu = singleton_union q; unbound_up = Some q}

  let function lt (q:V.t) : u
    ensures { forall x. mem x result <-> x <. q.V.real }
  =
    {unbound_down = Some q; bu = empty_union(); unbound_up = None}

  let le (q:V.t) : u
    ensures { forall x. mem x result <-> x <=. q.V.real }
  = { unbound_down = Some q; bu = singleton_union q; unbound_up = None }

  let union_with_bound (u : u) (b : bound_union)
    ensures { forall x. mem x result <-> mem x u \/ mem_union x b }
  =
    fix_untyped u.unbound_down u.unbound_up (union_union u.bu b)

  let function union_with_upper (u : u) (up : option V.t)
    ensures { forall x. mem x result <-> mem x u \/ mem_unbound_up x up }
  =
    let up = match u.unbound_up, up with
      | (None, None) -> None
      | (None, Some r) -> Some r
      | (Some r, None) -> Some r
      | (Some r, Some r') -> Some (if V.(r <= r') then r else r')
    end in
    fix_untyped u.unbound_down up u.bu

  let function union_with_lower (u : u) (down : option V.t)
    ensures { forall x. mem x result <-> mem x u \/ mem_unbound_down x down }
  =
    let down = match u.unbound_down, down with
      | (None, None) -> None
      | (None, Some r) -> Some r
      | (Some r, None) -> Some r
      | (Some r, Some r') -> Some (if V.(r <= r') then r' else r)
    end in
    fix_untyped down u.unbound_up u.bu

  let function union (u:u) (v:u) : u
    ensures { forall x. mem x result <-> mem x u \/ mem x v }
  =
    union_with_lower
      (union_with_upper (union_with_bound u v.bu) v.unbound_up)
      v.unbound_down

  let inter_up_up  (up up': option V.t)
    ensures { forall x. mem x result <-> mem_unbound_up x up /\ mem_unbound_up x up' }
  = match up, up' with
    | (Some r, Some r') -> gt V.(if r <= r' then r' else r)
    | (_,_) -> empty_u ()
    end

  let inter_down_down (dn dn': option V.t)
    ensures { forall x. mem x result <-> mem_unbound_down x dn /\ mem_unbound_down x dn' }
  = match dn, dn' with
    | (Some l, Some l') -> lt V.(if l <= l' then l else l')
    | (_,_) -> empty_u ()
    end

  let inter_down_up (dn up : option V.t)
    ensures { forall x. mem x result <-> mem_unbound_up x up /\ mem_unbound_down x dn }
  = match dn, up  with
    | (Some r, Some l) ->
       if V.(l < r) then
         { unbound_down=None; bu= mk_1_union (opn_opn_mk l r); unbound_up=None }
       else empty_u()
    | (_,_) -> empty_u ()
    end

  let inter_down_interval (dn : option V.t) (int: bound_interval)
    ensures { forall x. mem x result <-> mem_unbound_down x dn /\ mem_r_interval x int }
  = match dn with
    | Some r ->
       if V.(int.lower < r) then
         let upper, upper_closed =
           if V.(int.upper < r) then int.upper, int.upper_closed
           else r, false
         in
         let res_int = __mk_interval int.lower_closed int.lower upper_closed upper in
         { unbound_down=None; bu= mk_1_union res_int; unbound_up=None }
       else empty_u()
    | None -> empty_u()
    end

  let inter_up_interval (up : option V.t) (int: bound_interval)
    ensures { forall x. mem x result <-> mem_unbound_up x up /\ mem_r_interval x int }
  = match up with
    | Some l ->
       if V.(l < int.upper) then
         let lower, lower_closed =
           if V.(l < int.lower) then int.lower, int.lower_closed
           else l, false
         in
         let res_int = __mk_interval lower_closed lower int.upper_closed int.upper in
         { unbound_down=None; bu= mk_1_union res_int; unbound_up=None }
       else empty_u()
    | None -> empty_u()
    end

  let inter_up_bound (up : option V.t) (b : bound_union)
    ensures { forall x. mem x result <-> mem_union x b /\ mem_unbound_up x up }
  =
    let ref res = empty_u() in
    for i = 0 to length b.a - 1 do
      invariant { forall x. mem x res <->
                  gen_mem_sub_union x b.a 0 i /\ mem_unbound_up x up }
      res <- union res (inter_up_interval up b.a[i])
    done;
    res

  let inter_down_bound (dn : option V.t) (b : bound_union)
    ensures { forall x. mem x result <-> mem_union x b /\ mem_unbound_down x dn }
  =
    let ref res = empty_u() in
    for i = 0 to length b.a - 1 do
      invariant { forall x. mem x res <->
                  gen_mem_sub_union x b.a 0 i /\ mem_unbound_down x dn }
      res <- union res (inter_down_interval dn b.a[i])
    done;
    res

  let inter_bound_bound (b b' : bound_union)
    ensures { forall x. mem x result <-> mem_union x b /\ mem_union x b' }
  = { unbound_down=None; bu = inter_union b b'; unbound_up=None }

  let inter (u:u) (v:u) : u
    ensures { forall x. mem x result <-> mem x u /\ mem x v }
  =
    let (+) = union in
      inter_down_down u.unbound_down v.unbound_down
     +inter_up_up u.unbound_up v.unbound_up
     +inter_bound_bound u.bu v.bu
     +inter_down_up u.unbound_down v.unbound_up
     +inter_down_up v.unbound_down u.unbound_up
     +inter_down_bound v.unbound_down u.bu
     +inter_down_bound u.unbound_down v.bu
     +inter_up_bound u.unbound_up v.bu
     +inter_up_bound v.unbound_up u.bu

  let except (e : V.t) (u : u) : u
    ensures { forall x. mem x u /\ x<>e.V.real <-> mem x result }
  =
   let everything_after = gt e in
   let everything_before = lt e in
   inter u (union everything_after everything_before)

  predicate is_unbound_down (u : u) = u.unbound_down <> None
  predicate is_unbound_up (u : u) = u.unbound_up <> None

  let lemma is_unbound_down_prop (u : u) (x : real)
    requires { is_unbound_down u }
    ensures { result <. x /\ mem result u }
  =
    let l = match u.unbound_down with None -> absurd | Some l -> l end in
    V.(if real l <. x then real l -. 1.0 else x -. 1.0)

  let lemma is_unbound_up_prop (u : u) (x : real) : real
    requires { is_unbound_up u }
    ensures { result >. x /\ mem result u }
  =
    let l = match u.unbound_up with None -> absurd | Some l -> l end in
    V.(if real l >. x then real l +. 1.0 else x +. 1.0)

  let lemma nis_unbound_down_prop (u : u) : real
    requires { not is_unbound_down u }
    ensures { forall y. y <. result -> not mem y u }
  =
    if u.bu.a.length > 0 then
     begin
      let x = (union_inf u.bu).V.real -. 1.0 in
      assert { match u.unbound_up with None -> true | Some r -> x <. r end};
      x
     end
    else match u.unbound_up with
      | None -> 0.0
      | Some r -> r.V.real -. 1.0
    end

  let lemma nis_unbound_up_prop (u : u) : real
    requires { not is_unbound_up u }
    ensures { forall y. y >. result -> not mem y u }
  =
    if u.bu.a.length > 0 then
     begin
      let x = (union_sup u.bu).V.real +. 1.0 in
      assert { match u.unbound_down with None -> true | Some r -> x >. r end};
      x
     end
    else match u.unbound_down with
      | None -> 0.0
      | Some r -> r.V.real +. 1.0
    end

  let lemma cincl_bound_prop (u : u) (x : real)
    requires { length u.bu.a > 0 }
    requires { union_inf u.bu <=. x <=. union_sup u.bu }
    ensures { not mem_unbound_down x u.unbound_down }
    ensures { not mem_unbound_up x u.unbound_up }
  =
    match u.unbound_down, u.unbound_up with
    | Some l, Some r -> ()
    | _, _ -> ()
    end

  let lemma has_all_form (u : u)
    requires { forall x. mem x u }
    ensures {
      match u.unbound_down, u.unbound_up with
        | Some x(*, Some y*), _ -> V.(real x = 0.0(* = real y*))
        | _, _ -> false
      end
    }
  =
    if length u.bu.a = 0 then
      match u.unbound_up, u.unbound_down with
      | Some x, _ | _, Some x -> assert { not mem x u }
      | None, None -> assert { not mem 0.0 u }
      end
    else if length u.bu.a > 1 then
      let x, y = u.bu.a[0].upper, u.bu.a[1].lower in
      if V.(x = y) then begin
        assert { x <=. union_sup u.bu by (u.bu.a[0] << u.bu.a[u.bu.a.length-1] )};
        assert { not mem x u }
      end else begin
        let z = V.((x + y) / (of_int 2)) in
        assert { not mem z u }
      end
    else(* |bu|=1 *) match u.unbound_down, u.unbound_up with
    | None, _ -> assert { not mem (u.bu.a[0].lower -. 1.0) u }
    | _, None -> assert { not mem (u.bu.a[0].upper +. 1.0) u }
    | Some l, Some r ->
       if V.(l < u.bu.a[0].lower) then begin
         assert { not mem l u }; absurd
       end else if V.(u.bu.a[0].upper < r) then begin
         assert { not mem r u }; absurd
       end else begin
         if V.(u.bu.a[0].lower < u.bu.a[0].upper) then
           assert { not mem u.bu.a[0].lower u }
         else begin
           assert { u.bu.a[0].lower = u.bu.a[0].upper }
         end
       end
    end

  let lemma eq_ext_aux0 (u v : u)
    requires { forall x. mem x u <-> mem x v }
    ensures {
      match u.unbound_down, v.unbound_down with
        | None, None -> true
        | Some l, Some l' -> V.(l' <= l)
        | _, _ -> false
      end
    }
  =
    match u.unbound_down, v.unbound_down with
    | (Some _, None) ->
      let x = nis_unbound_down_prop v in
      let y = is_unbound_down_prop u x in
      absurd
    | (None, Some l) ->
      let x = nis_unbound_down_prop u in
      let y = is_unbound_down_prop v x in
      absurd
    | (Some l, Some l') ->
        if V.(l < l') then begin
          if u.bu.a.length > 0 && V.(u.bu.a[0].lower=u.bu.a[0].upper=l) then
            if u.bu.a.length > 1 then
              if u.bu.a[0].upper_closed then
                let smaller = V.(if u.bu.a[1].lower < l' then u.bu.a[1].lower else l') in
                let x = V.(smaller + u.bu.a[0].upper).V.real /. 2.0 in
                assert {mem x v /\ not mem x u}
              else assert { not mem u.bu.a[0].upper u }
            else match u.unbound_up with
            | None ->
                let x = V.(real (l'+l)) /. 2.0 in
                assert {mem x v /\ not mem x u}
            | Some r ->
                if V.(l < r) then begin
                  let smaller = V.(if l' < r then l' else r) in
                  let x = V.(real (smaller+l)) /. 2.0 in
                  assert {mem x v /\ not mem x u}
                end else begin (* SO HERE WE HAVE TO HANDLE THE BIG ASS CASE *)
                  assert { forall x. mem x u };
                  absurd
                end
            end
          else assert {mem l.V.real v /\ not mem l.V.real u}
        end
        else assert { V.(l' <= l) }
    | (None, None) -> ()
    end

  let lemma eq_ext_aux0' (u v : u)
    requires { forall x. mem x u <-> mem x v }
    ensures {
      match u.unbound_down, v.unbound_down with
        | None, None -> true
        | Some l, Some l' -> V.(l <= l')
        | _, _ -> false
      end
    }
  = ()

  let lemma eq_ext_aux0'' (u v : u)
    requires { forall x. mem x u <-> mem x v }
    ensures { u.unbound_down = v.unbound_down }
  = match u.unbound_down, v.unbound_down with
    | None, None -> ()
    | Some l, Some l' -> assert { l <=. l' /\ l' <=. l }
    | _, _ -> absurd
    end

  let lemma eq_ext_aux1 (u v : u)
    requires { forall x. mem x u <-> mem x v }
    ensures {
      match u.unbound_up, v.unbound_up with
        | None, None -> true
        | Some r, Some r' -> V.(r <= r')
        | _, _ -> false
      end
    }
  =
    match u.unbound_up, v.unbound_up with
    | (Some _, None) ->
      let x = nis_unbound_up_prop v in
      let y = is_unbound_up_prop u x in
      absurd
    | (None, Some _) ->
      let x = nis_unbound_up_prop u in
      let y = is_unbound_up_prop v x in
      absurd
    | (Some r, Some r') ->
        if V.(r' < r) then begin
          let i = length u.bu.a - 1 in
          if u.bu.a.length > 0 && V.(u.bu.a[i].lower=u.bu.a[i].upper=r) then
            if u.bu.a.length > 1 then
              if u.bu.a[i].lower_closed then begin
                let bigger = V.(if u.bu.a[i-1].upper<r' then r' else u.bu.a[i-1].upper) in
                let x = V.(bigger + u.bu.a[i].lower).V.real /. 2.0 in
                assert {mem x v /\ not mem x u}
              end else assert { not mem u.bu.a[i].lower u }
            else match u.unbound_down with
            | None ->
                let x = V.(real (r'+r)) /. 2.0 in
                assert {mem x v /\ not mem x u}
            | Some l ->
                if V.(l < r) then begin
                  let bigger = V.(if r' < l then l else r') in
                  let x = V.(real (bigger+r)) /. 2.0 in
                  assert {mem x v /\ not mem x u}
                end else begin
                  assert { forall x. mem x u };
                  absurd
                end
            end
          else assert {mem r.V.real v /\ not mem r.V.real u}
        end
        else assert { V.(r' <= r') }
    | (None, None) -> ()
    end

  let lemma eq_ext_aux1' (u v : u)
    requires { forall x. mem x u <-> mem x v }
    ensures {
      match u.unbound_up, v.unbound_up with
        | None, None -> true
        | Some r, Some r' -> V.(r <= r')
        | _, _ -> false
      end
    }
  = ()

  let lemma eq_ext_aux1'' (u v : u)
    requires { forall x. mem x u <-> mem x v }
    ensures { u.unbound_up = v.unbound_up }
  = match u.unbound_up, v.unbound_up with
    | None, None -> ()
    | Some r, Some r' -> assert { r <=. r' /\ r' <=. r }
    | _, _ -> absurd
    end

  let lemma eq_ext_aux2 (u v : u) (x : real)
    requires { forall x. mem x u <-> mem x v }
    requires { u.unbound_down = v.unbound_down }
    requires { u.unbound_up = v.unbound_up }
    requires { mem_union x u.bu }
    ensures { mem_union x v.bu }
  =
    assert { mem x u }; assert { mem x v };
    assert { not mem_unbound_up x u.unbound_up };
    assert { not mem_unbound_down x u.unbound_down }

  let lemma eq_ext_aux3 (u v : u)
    requires { forall x. mem x u <-> mem x v}
    ensures { bound_union_weak_eq u.bu v.bu }
  =
    assert { u.unbound_down = v.unbound_down };
    assert { u.unbound_up = v.unbound_up };
    assert { forall x. mem_union x u.bu <-> mem_union x v.bu }


  let predicate weak_eq (u v: u) =
  any bool ensures {  result <->
     (u.unbound_down = v.unbound_down /\ u.unbound_up = v.unbound_up
      /\ bound_union_weak_eq u.bu v.bu) }

  let lemma eq_ext_aux (u v : u)
    requires { forall x. mem x u <-> mem x v }
    ensures { weak_eq u v }
  = ()

  lemma eq_ext : forall u v.
    (forall x. mem x u <-> mem x v ) <->
    (weak_eq u v)

  let subset (u:u) (v:u) : bool
    ensures { result <-> forall x. mem x u -> mem x v }
  =
    weak_eq (inter u v) u

  let disjoint (u:u) (v:u) : bool
    ensures { result <-> forall x. not (mem x u /\ mem x v) }
  = weak_eq (inter u v) (empty_u())

  let function op_si_up_down (op : V.op) (o : option V.t) : option V.t
    requires { V.si op }
    ensures { forall x. mem_unbound_up x o <-> mem_unbound_up (op.V.ur x) result }
    ensures { forall x. mem_unbound_down x o <-> mem_unbound_down (op.V.ur x) result }
  = any option V.t ensures { result = match o with
    | None -> None
    | Some l -> Some (op.V.uq l)
    end }

  let op_si (op : V.op) (u : u)
    requires { V.si op }
    ensures { forall x. mem x u <-> mem (op.V.ur x) result }
  =
    let ud = op_si_up_down op u.unbound_down in
    let uu = op_si_up_down op u.unbound_up in
    let b = op_si_union op u.bu in
    fix_untyped ud uu b

  let function op_sd_up_down (op : V.op) (o : option V.t) : option V.t
    requires { V.sd op }
    ensures { forall x. mem_unbound_up x o <-> mem_unbound_down (op.V.ur x) result }
    ensures { forall x. mem_unbound_down x o <-> mem_unbound_up (op.V.ur x) result }
  = any option V.t ensures { result = match o with
    | None -> None
    | Some l -> Some (op.V.uq l)
    end }

  let op_sd (op : V.op) (u : u)
    requires { V.sd op }
    ensures { forall x. mem x u <-> mem (op.V.ur x) result }
  =
    let ud = op_sd_up_down op u.unbound_down in
    let uu = op_sd_up_down op u.unbound_up in
    let b = op_sd_union op u.bu in
    fix_untyped uu ud b

  let cube (u : u) : u
    ensures { forall x. mem x u <-> mem (x*.x*.x) result }
  =
    let op = { V.ur=(fun x -> x*.x*.x); V.uq=(fun q -> V.(q*q*q))} in
    op_si op u

  let neg (u : u) : u
    ensures { forall x. mem x u <-> mem (0.0 -. x) result }
  =
    let op = { V.ur=(fun x -> 0.0 -. x); V.uq=(fun q -> V.(q-q-q))} in
    op_sd op u

  let mul_cst (c : V.t) (u : u) : u
    ensures { forall x. mem x u -> mem (x *. c) result }
  =
    let op = { V.ur=( *.) c.V.real; V.uq=V.((*) c) } in
    if V.(c < c-c) then
      begin
        assert { c.V.real <. 0.0 }; (* just a hint for efficiency *)
        op_sd op u
      end
    else if V.(c-c < c) then
      op_si op u
    else (* c = 0 *)
      singleton c

  let function op_nsi_up (op : V.op) (o : option V.t) : u
    requires { V.nsi op }
    ensures { forall x. mem_unbound_up x o -> mem (op.V.ur x) result }
  = any u ensures { result =
    match o with
    | None -> empty_u()
    | Some l ->
        let nl = op.V.uq l in union (singleton nl) (gt nl)
    end }

  let function op_nsi_down (op : V.op) (o : option V.t) : u
    requires { V.nsi op }
    ensures { forall x. mem_unbound_down x o -> mem (op.V.ur x) result }
  = any u ensures { result =
    match o with
    | None -> empty_u()
    | Some l ->
        let nl = op.V.uq l in union (singleton nl) (lt nl)
    end }

  let op_nsi (op : V.op) (u : u)
    requires { V.nsi op }
    ensures { forall x. mem x u -> mem (op.V.ur x) result }
  =
    let ud = op_nsi_down op u.unbound_down in
    let uu = op_nsi_up op u.unbound_up in
    let b = op_nsi_union op u.bu in
    union uu (union ud {unbound_down=None;unbound_up=None;bu=b})

  use real.Truncate use real.FromInt

  let ceil (u : u) : u
    ensures { forall x. mem x u -> mem (from_int (ceil x)) result }
  =
    let op = { V.ur=(fun x -> from_int (ceil x)); V.uq=(fun q -> V.(of_int (ceil q))) } in
    assert { forall x x'. x<=.x' -> from_int (ceil x) <=. from_int (ceil x') };
    op_nsi op u

  let floor (u : u) : u
    ensures { forall x. mem x u -> mem (from_int (floor x)) result }
  =
    let op = { V.ur=(fun x -> from_int (floor x)); V.uq=(fun q -> V.(of_int (floor q))) } in
    assert { forall x x'. x<=.x' -> from_int (floor x) <=. from_int (floor x') };
    op_nsi op u

  let truncate (u : u) : u
    ensures { forall x. mem x u -> mem (from_int (truncate x)) result }
  =
    let op = { V.ur=(fun x -> from_int (truncate x)); V.uq=(fun q -> V.(of_int (truncate q))) } in
    assert { forall x x'. x<=.x' -> from_int (truncate x) <=. from_int (truncate x') };
    op_nsi op u

  function relu (x:real) : real = if x >=. 0.0 then x else 0.0
  let relu (u : u) : u
    ensures { forall x. mem x u -> mem (relu x) result }
  =
    let op = { V.ur=relu;
               V.uq=(fun q -> V.(if (q-q) <= q then q else (q-q))) }
    in
    assert { forall x x'. x<=.x' ->  relu x <=. relu x' };
    op_nsi op u


end
end
