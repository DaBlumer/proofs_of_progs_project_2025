module BoundInterval
  use int.Int
  use bool.Bool
  use real.RealInfix
  use option.Option
  clone field.Intf as V with axiom equal_is_eq


  type bound_interval = {
    lower : V.t;
    upper : V.t;
    lower_closed : bool;
    upper_closed : bool
  } invariant {
      V.(<=) lower upper /\
      (V.(<) lower upper \/ (lower_closed /\ upper_closed))
  } by { lower=V.non_empty; upper=V.non_empty; lower_closed=true; upper_closed=true }

  function diam_interval (i : bound_interval) : real
  = V.(i.upper - i.lower).V.real
  lemma diam_interval_pos : forall i. diam_interval i >=. 0.0

  predicate mem_r_interval (e : real) (i : bound_interval) =
       i.lower.V.real <. e <. i.upper.V.real
    \/ (i.lower_closed /\ e = i.lower.V.real)
    \/ (i.upper_closed /\ e = i.upper.V.real)

  let predicate mem_interval (e : V.t) (i : bound_interval) =
     any bool ensures { result <-> V.(
          (i.lower < e < i.upper)
       \/ (i.lower_closed /\ e = i.lower)
       \/ (i.upper_closed /\ e = i.upper)
     )}

  predicate incl_r_interval (i j : bound_interval) =
    forall e. mem_r_interval e i -> mem_r_interval e j

  lemma mem_r_charac : forall x i. mem_interval x i -> mem_r_interval x.V.real i

  let function incl_interval (i j : bound_interval) : bool
  = any bool ensures {
      result <-> V.(
            j.lower <= i.lower
         /\ i.upper <= j.upper
         /\ (i.upper = j.upper -> i.upper_closed -> j.upper_closed)
         /\ (i.lower = j.lower -> i.lower_closed -> j.lower_closed)
      )
    }

  predicate disj_r_interval (i j : bound_interval) =
    forall x. not mem_r_interval x i \/ not mem_r_interval x j

  let predicate before_interval (i j : bound_interval)
  = any bool ensures {
      result <-> V.(i.upper < j.lower
      \/
      (i.upper = j.lower /\ not i.upper_closed /\ not j.lower_closed))
    }

  let predicate lax_before_interval (i j : bound_interval)
  = any bool ensures {
      result <-> V.(i.upper < j.lower
      \/
      (i.upper = j.lower /\ not (i.upper_closed /\ j.lower_closed)))
    }

  lemma interval_r_nonempy :
    forall i: bound_interval. exists x. mem_r_interval x i

  lemma incl_interval_charac :
    forall i j : bound_interval.
      incl_r_interval i j
      <->
      incl_interval i j

  lemma before_disj_r_interval : forall i j : bound_interval.
    (lax_before_interval i j \/ lax_before_interval j i) <-> disj_r_interval i j

  let predicate strt_before_interval (i j : bound_interval) : bool
  = any bool ensures {
    result <-> V.(
      i.lower < j.lower ||
      (i.lower = j.lower && (i.lower_closed || not j.lower_closed))
    )}
  let predicate (<==) = strt_before_interval

  lemma strt_before_linear : forall i j. i <== j \/ j <== i

  let predicate end_after_interval (i j : bound_interval)
  = any bool ensures {
      result <-> V.(
        j.upper < i.upper ||
        (i.upper = j.upper && (i.upper_closed || not j.upper_closed))
    )}
  let predicate (==>) = end_after_interval

  let predicate nends_before_starts (i j : bound_interval)
  = any bool ensures {
      result <-> V.( let (i, j) = if i<==j then (i,j) else (j,i) in
        j.lower < i.upper ||
        (i.upper = j.lower && (i.upper_closed || j.lower_closed))
    )}
  let predicate (<.>) = nends_before_starts

  let predicate r_before_interval (e : real) (i : bound_interval)
  = any bool ensures { result <-> V.(
      e <. i.lower.real \/ (e = i.lower.real /\ not i.lower_closed)
  )}
  let predicate (.<-) = r_before_interval

  let predicate r_after_interval (e : real) (i : bound_interval)
  = any bool ensures { result <-> V.(
      e >. i.upper.real \/ (e = i.upper.real /\ not i.upper_closed)
  )}
  let predicate (->.) = r_after_interval

  let lemma r_before_after_mem (x:real) (i:bound_interval)
    ensures { mem_r_interval x i -> not(x .<- i \/ x ->. i) }
    ensures { x .<- i -> not(mem_r_interval x i \/ x ->. i) }
    ensures { x ->. i -> not(x .<- i \/ mem_r_interval x i) }
  = ()

  let function ndisj_interval (i j : bound_interval) : bool
  = any bool ensures {
    result <-> V.(
      let (i, j) = if strt_before_interval i j then (i, j) else (j, i) in
         j.lower <= i.upper
      && (i.upper = j.lower -> i.upper_closed && j.lower_closed)
    )
  }

  lemma ndisj_carac2 : forall i j: bound_interval.
    ndisj_interval i j \/ lax_before_interval i j \/ lax_before_interval j i

  let lemma nends_comm (i j : bound_interval)
    requires {i <.> j}
    ensures {j <.> i}
  = let (i, j) = if i<==j then (i,j) else (j,i) in
       V.(assert { j.lower < i.upper \/
        (i.upper = j.lower /\ (i.upper_closed \/ j.lower_closed)) })

  let function merge_intervals (i j : bound_interval) : bound_interval
    requires { i <.> j }
    ensures { forall x. mem_r_interval x result <->
                        (mem_r_interval x i \/ mem_r_interval x j) }
    ensures { let k = if i <== j then i else j in
              result.lower = k.lower /\ result.lower_closed = k.lower_closed }
    ensures { let k = if i ==> j then i else j in
              result.upper = k.upper /\ result.upper_closed = k.upper_closed }
  =
    let (i, j) = if i <== j then (i, j) else (j, i) in
    let lst = if i ==> j then i else j in
    {lower=i.lower; lower_closed=i.lower_closed;
     upper=lst.upper; upper_closed=lst.upper_closed}

  let function inter_intervals (i j : bound_interval) : bound_interval
    requires { ndisj_interval i j }
    ensures { forall x. mem_r_interval x result <->
                        mem_r_interval x i /\ mem_r_interval x j }
    ensures { let k = if i <== j then j else i in
              result.lower = k.lower /\ result.lower_closed = k.lower_closed }
    ensures { let k = if i ==> j then j else i in
              result.upper = k.upper /\ result.upper_closed = k.upper_closed }
  =
    let nf, nl = (if i <== j then j else i), (if i ==> j then j else i) in
    {lower=nf.lower; lower_closed=nf.lower_closed;
     upper=nl.upper; upper_closed=nl.upper_closed}

  let predicate mem_interval_inside e i = V.(i.lower < e < i.upper)
  let predicate mem_interval_border (e : V.t) (i : bound_interval) =
    any bool ensures {
      result <-> V.(
          (e = i.lower /\ i.lower_closed)
       \/ (e = i.upper /\ i.upper_closed)
    )}

  let function except_interval_inside (i : bound_interval) (e : V.t)
    requires { mem_interval_inside e i }
    ensures { let (j, k) = result in forall x.
              (mem_r_interval x i /\ x<>e)
              <->
              (mem_r_interval x j \/ mem_r_interval x k) }
  = (
    {i with upper=e; upper_closed=false},
    {i with lower=e; lower_closed=false}
  )

  let function except_interval_border (i : bound_interval) (e : V.t)
    requires { mem_interval_border e i }
    requires { V.(i.lower < i.upper) }
    ensures { forall x. mem_r_interval x result
                    <-> (mem_r_interval x i /\ x<>e) }
  = if V.(e = i.lower) then { i with lower_closed=false }
    else { i with upper_closed=false }

  let predicate (<<) i j = before_interval i j
  let predicate (<<') i j = lax_before_interval i j
  let function (++) = merge_intervals
  let function (^^) = inter_intervals

  (*lemma tmp0 : forall i j. ndisj_interval i j <-> ndisj_interval j i*)

  lemma incl_interval_ext : forall i j. incl_interval i j /\ incl_interval j i ->
    i = j by bound_interval'eq i j

  let lemma merge_intervals_comm (i j : bound_interval) : unit
    requires { i <.> j }
    ensures { i++j=j++i
              by (incl_interval (i++j)(j++i)/\incl_r_interval(j++i)(i++j)) } = ()

  let lemma inter_intervals_comm (i j : bound_interval) : unit
    requires { ndisj_interval i j }
    ensures { i^^j=j^^i
              by incl_r_interval(i^^j)(j^^i)/\incl_r_interval(i^^j)(j^^i) } = ()

  let lemma merge_union_comp_order (i j k: bound_interval)
    requires { i <.> j }
    ensures { (k << i /\ k << j) -> k << (i++j) (*/\ k << (i^^j)*) }
    ensures { (i << k /\ j << k) -> (i++j) << k (*/\ (i^^j) << k*)}
  = ()

  let lemma merge_union_comp_order' (i j k: bound_interval)
    requires { i <.> j }
    ensures { (k <== i /\ k <== j) -> k <== (i++j) (*/\ k <== (i^^j)*) }
    ensures { (i <== k /\ j <== k) -> (i++j) <== k (*/\ (i^^j) <== k*)}
  = ()

  let lemma fuse_union_comp_order (i j k : bound_interval)
    requires { ndisj_interval i j }
    ensures { (k << i /\ k << j) -> k << (i^^j) }
    ensures { (i << k /\ j << k) -> (i^^j) << k }
  = ()

  let lemma fuse_union_comp_order' (i j k : bound_interval)
    requires { ndisj_interval i j }
    ensures { (k <== i /\ k <== j) -> k <== (i^^j) }
    ensures { (i <== k /\ j <== k) -> (i^^j) <== k }
  = ()

  let function __mk_interval lb l ub u
    requires { V.(l <= u) /\ (l = u -> ub /\ lb) }
  = { lower_closed=lb; lower=l; upper_closed=ub; upper=u }

  let function clo_clo_mk a b
    requires { V.(a <= b) }
    ensures { forall x. mem_r_interval x result -> a.V.real <=. x <=. b.V.real }
  = __mk_interval true a true b

  let function clo_opn_mk a b
    requires { V.(a < b) }
    ensures { forall x. mem_r_interval x result -> a.V.real <=. x <. b.V.real }
  = __mk_interval true a false b

  let function opn_clo_mk a b
    requires { V.(a < b) }
    ensures { forall x. mem_r_interval x result -> a.V.real <. x <=. b.V.real }
  = __mk_interval false a true b

  let function opn_opn_mk a b
    requires { V.(a < b) }
    ensures { forall x. mem_r_interval x result -> a.V.real <. x <. b.V.real }
  = __mk_interval false a false b

  let function singleton_mk a
    ensures { forall x. mem_r_interval x result <-> x = a.V.real }
    ensures { let r = result in
              r.lower=a=r.upper /\ r.lower_closed=true=r.upper_closed }
  = __mk_interval true a true a

  lemma before_interval_trans : forall i j k.
    before_interval i j -> before_interval j k -> before_interval i k

  lemma starts_before_trans : forall i j k.
    i <== j /\ j <== k -> i <== k

  lemma order_mix_trans : forall i j k.
    i << j /\ j <== k -> i << k

  clone array_utils.ArraySort as LaxS
        with type elt = bound_interval, predicate le = (<==), val le = (<==)

end




module BoundUnion
  use BoundInterval
  use int.Int
  use array.Array
  use array_utils.ArrayUtils
  use exn.Exn
  use real.RealInfix

  type bound_union = {
     a : array bound_interval
  } invariant {
    forall j. 0 <= j < a.length - 1 -> a[j] << a[j+1]
  }

  type lax_bound_union = {
     lax_a : array bound_interval
  } invariant {
    let a = lax_a in
    forall j. 0 <= j < a.length - 1 -> lax_a[j] <== lax_a[j+1]
  }

  let predicate gen_mem_sub_union (x:real) (a:array bound_interval) (i j:int)
    requires { 0 <= i <= j <= a.length }
  = any bool ensures {result <-> exists k. i <= k < j /\ mem_r_interval x a[k]}

  predicate gen_mem_union (x:real) (a:array bound_interval) =
    exists j. 0 <= j < a.length /\ mem_r_interval x a[j]

  predicate lax_mem_union (x:real) (lbu : lax_bound_union) =
    gen_mem_union x lbu.lax_a

  predicate mem_union (x:real) (bu : bound_union) =
    gen_mem_union x bu.a

  let lemma replace_mem_union (x:real) (a new:array bound_interval) (i j:int)
    requires { 0 <= i <= j <= length a }
    requires { gen_mem_sub_union x a i j <-> gen_mem_union x new }
    ensures { gen_mem_union x (replace a new i j) <-> gen_mem_union x a }
  = ()

  let rec lemma all_before (bu : bound_union) (i j : int) : unit
    requires { 0 <= i < j < bu.a.length }
    ensures { bu.a[i] << bu.a[j] }
    variant { j - i }
  = if j = i+1 then () else all_before bu (i+1) j

  let rec lemma lax_all_before (bu : lax_bound_union) (i j : int) : unit
    requires { 0 <= i < j < bu.lax_a.length }
    ensures { bu.lax_a[i] <== bu.lax_a[j] }
    variant { j - i }
  = if j = i+1 then () else lax_all_before bu (i+1) j

  lemma mem_union_unique :
    forall x. forall bu. forall i. 0 <= i < bu.a.length -> mem_r_interval x bu.a[i] ->
      forall j. 0 <= j < i \/ i < j < bu.a.length -> not mem_r_interval x bu.a[j]

  let function union_sup (bu : bound_union) : V.t
    requires { length bu.a > 0 }
  = bu.a[length bu.a -1].upper

  let function union_inf (bu : bound_union) : V.t
    requires { length bu.a > 0 }
  = bu.a[0].lower

  lemma union_sup_inf_are_bounds :
    forall bu x. mem_union x bu -> (union_inf bu <=. x <=. union_sup bu)

  let function lax_inj (bu : bound_union) : lax_bound_union
    ensures {forall x. mem_union x bu <-> lax_mem_union x result}
  = { lax_a = bu.a }

  let function lax_merge (lbu: lax_bound_union) (i : int) : lax_bound_union
    requires { 0 <= i < lbu.lax_a.length - 1}
    requires { lbu.lax_a[i] <.> lbu.lax_a[i+1] }
    ensures { result.lax_a.length = lbu.lax_a.length - 1 }
    ensures { forall x. lax_mem_union x result <-> lax_mem_union x lbu }
    ensures { forall j. 0 <= j < i -> result.lax_a[j] = lbu.lax_a[j] }
    ensures { forall j. i+1 <= j < lbu.lax_a.length - 1 ->
              result.lax_a[j] = lbu.lax_a[j+1] }
    ensures { result.lax_a[i] = lbu.lax_a[i]++lbu.lax_a[i+1] }
  =
    begin (* i'm not sure these make the proof quicker *)
      (*let j = i+1 in
      assert { V.(lbu.lax_a[i].lower<=lbu.lax_a[j].lower<=lbu.lax_a[j].upper) };
      assert { V.(lbu.lax_a[j].lower <= lbu.lax_a[j].upper) };
      assert { not V.(lbu.lax_a[Int.(i+1)].upper < lbu.lax_a[i].lower) };
      assert { not (before_interval lbu.lax_a[i+1] lbu.lax_a[i]) }*)
    end;
    let na = replace_by_one lbu.lax_a (lbu.lax_a[i]++lbu.lax_a[i+1]) i (i+2) in
    { lax_a = na }

  let lemma relating_orders (i j : bound_interval)
    ensures {(i<==j /\ not (i<.>j)) <-> i << j} = ()

  let lax_to_strict (lbu : lax_bound_union) : bound_union
    ensures { forall x. mem_union x result <-> lax_mem_union x lbu }
  =
    let ref i = 0 in
    let ref tmp = { lax_a = copy lbu.lax_a } in
    while i < tmp.lax_a.length - 1 do
      variant { tmp.lax_a.length - i }
      invariant { 0 <= i }
      (* we need to assure why3 that the type invariant is preserved *)
      invariant { forall j. 0 <= j < tmp.lax_a.length - 1 ->
                  tmp.lax_a[j] <== tmp.lax_a[j+1] }
      invariant { forall j. 0 <= j < i -> tmp.lax_a[j] << tmp.lax_a[j+1] }
      invariant { forall x. lax_mem_union x lbu <-> lax_mem_union x tmp }

      assert { not tmp.lax_a[i]<.>tmp.lax_a[i+1] -> tmp.lax_a[i] << tmp.lax_a[i+1] };
      if tmp.lax_a[i] <.> tmp.lax_a[i+1] then
        begin
        assert { tmp.lax_a[i] <== tmp.lax_a[i+1] };
        assert { i-1 >= 0 -> tmp.lax_a[i-1] << tmp.lax_a[i] };
        assert { i-1 >= 0 -> tmp.lax_a[i-1] << tmp.lax_a[i+1] };
        assert { i-1 >= 0 -> tmp.lax_a[i-1] << tmp.lax_a[i]++tmp.lax_a[i+1] };
        tmp <- lax_merge tmp i;
        assert { i-1 >= 0 -> tmp.lax_a[i-1] << tmp.lax_a[i] };
        end
      else
        i <- i + 1
    done;
    { a = tmp.lax_a }

  let lax_add_interval (int : bound_interval) (bu: lax_bound_union) : lax_bound_union
    ensures { forall x. lax_mem_union x result
                    <-> lax_mem_union x bu \/ mem_r_interval x int }
  =
    let ref i = 0 in
    while i < bu.lax_a.length && not int <== bu.lax_a[i] do
      variant { bu.lax_a.length - i }
      invariant { 0 <= i <= bu.lax_a.length}
      invariant { i > 0 -> bu.lax_a[i-1] <== int }
      i <- i+1
    done;
    { lax_a = insert int bu.lax_a i }

  let lax_union_union (bu bu' : lax_bound_union) : lax_bound_union
    ensures { forall x. lax_mem_union x result
                    <-> lax_mem_union x bu \/ lax_mem_union x bu' }
  =
    let ref i = 0 in
    let ref tmp = {lax_a = copy bu.lax_a} in
    while i < length bu'.lax_a do
      variant { length bu'.lax_a - i }
      invariant { 0 <= i <= length bu'.lax_a }
      invariant { forall j. 0 <= j < length tmp.lax_a - 1 ->
                  tmp.lax_a[j]<==tmp.lax_a[j+1] }
      invariant { forall x. lax_mem_union x tmp <->
                            lax_mem_union x bu \/ gen_mem_sub_union x bu'.lax_a 0 i}
      tmp <- lax_add_interval bu'.lax_a[i] tmp;
      i <- i + 1
    done;
    tmp

  let union_union (bu bu' : bound_union) : bound_union
    ensures { forall x. mem_union x result
                    <-> mem_union x bu \/ mem_union x bu' }
  =
    lax_to_strict (lax_union_union (lax_inj bu) (lax_inj bu'))

  let function mk_1_union (i : bound_interval)
    ensures { forall x. mem_union x result <-> mem_r_interval x i }
  = { a = make 1 i }

  let array_to_lax_bound_union (a : array bound_interval) : lax_bound_union
    ensures { forall x. gen_mem_union x a <-> lax_mem_union x result }
  = { lax_a = LaxS.sort a }

  let lax_bound_union_to_array (lu: lax_bound_union) : array bound_interval
    ensures { forall x. gen_mem_union x result <-> lax_mem_union x lu }
  = lu.lax_a

  let gen_inter_interval (int : bound_interval) (a : array bound_interval) : array bound_interval
    ensures { forall x. gen_mem_union x result
                    <-> gen_mem_union x a /\ mem_r_interval x int }
  =
    let ref i = 0 in
    let ref tmp = make 0 (singleton_mk V.non_empty) in
    while i < length a do
      variant { length a - i }
      invariant { 0 <= i <= length a }
      invariant { forall x. gen_mem_union x tmp <->
                            gen_mem_sub_union x a 0 i /\ mem_r_interval x int }
      if ndisj_interval int a[i] then
        begin
          let inter = int ^^ a[i] in
          tmp <- replace_by_one tmp inter (length tmp) (length tmp);
          assert { forall x. gen_mem_union x tmp <->
                   ( (gen_mem_sub_union x a 0 i /\ mem_r_interval x int)
                     \/ mem_r_interval x tmp[length tmp - 1]) }
        end
      else ();
      i <- i + 1
    done;
    tmp

  let inter_interval (int : bound_interval) (bu : bound_union) : bound_union
    ensures { forall x. mem_union x result <->
                        mem_union x bu /\ mem_r_interval x int }
  =
    let gen_bu = lax_bound_union_to_array (lax_inj bu) in
    let res = gen_inter_interval int gen_bu in
    lax_to_strict (array_to_lax_bound_union res)

  let inter_union (bu bu' : bound_union) : bound_union
    ensures { forall x. mem_union x result <->
                        mem_union x bu /\ mem_union x bu' }
  =
    let ref result = { a = empty () } in
    for i = 0 to bu'.a.length - 1 do
      invariant { forall x. mem_union x result <->
                            mem_union x bu /\ gen_mem_sub_union x bu'.a 0 i }
      result <- union_union result (inter_interval bu'.a[i] bu)
    done;
    result

  let lemma gen_replace_mem_union (x:real) (a new:array bound_interval) (i j:int)
    requires { 0 <= i <= j <= length a }
    ensures { gen_mem_union x (replace a new i j) <->
              (gen_mem_sub_union x a 0 i \/ gen_mem_sub_union x a j (length a)
               \/ gen_mem_union x new) }
  = ()

  let function append (a b: array 'a) = replace a b (length a) (length a)
  let lemma append_mem (x : real) (a b : array bound_interval)
    ensures { gen_mem_union x (append a b) <-> gen_mem_union x a \/ gen_mem_union x b }
  = ()

  let gen_except_union (a : array bound_interval) (e : V.t)
    ensures { forall x.
              ((gen_mem_union x a /\ x<>e) <-> gen_mem_union x result) }
  =
    let ref res = empty () in
    for i = 0 to length a - 1 do
      invariant { forall x. ( (gen_mem_sub_union x a 0 i /\ x<>e) <->
                              (gen_mem_union x res) ) }

      assert { forall x. ( (gen_mem_sub_union x a 0 (i+1) /\ x<>e) <->
                               ( (gen_mem_sub_union x a 0 i/\x<>e)
                                  \/(mem_r_interval x a[i]/\x<>e)) ) };

      if not mem_interval e a[i] then
        begin
          res <- (append res (make 1 a[i]));
          assert { forall x. ((mem_r_interval x a[i] /\ x<>e) ->
                     (gen_mem_union x res by mem_r_interval x res[length res - 1])) };
        end
      else if V.(a[i].lower = a[i].upper) then
        ()
      else if mem_interval_border e a[i] then
        begin
          let nint = except_interval_border a[i] e in
           res <- append res (make 1 nint);
          assert { forall x. mem_r_interval x a[i] /\ x <> e -> gen_mem_union x res
                             by mem_r_interval x res[length res - 1] };
        end
      else if mem_interval_inside e a[i] then
        begin
          let int,int' = except_interval_inside a[i] e in
          res <- append res (make 1 int);
          res <- append res (make 1 int');
          assert { let j = length res - 2 in
                   forall x. (mem_r_interval x a[i]/\x<>e) <->
                             (mem_r_interval x res[j]\/mem_r_interval x res[j+1]) };
        end
    done;
    res

  let except_union (bu : bound_union) (e : V.t)
    ensures { forall x. mem_union x bu /\ x<>e <-> mem_union x result }
  =
    let a = lax_bound_union_to_array (lax_inj bu) in
    lax_to_strict (array_to_lax_bound_union (gen_except_union a e))


  let lemma inbetween_ordered_intervals (bu : bound_union) (x : real) (i : int)
    requires { 0 <= i < length bu.a - 1}
    requires { x ->. bu.a[i] /\ x .<- bu.a[i+1] }
    ensures { not (mem_union x bu) }
  =
    assert { forall j. 0 <= j < i ->
             x ->. bu.a[j] by (bu.a[j] << bu.a[i] /\ x ->. bu.a[i] ) };
    assert { forall j. i+1 < j < length bu.a ->
             x .<- bu.a[j] by (bu.a[i+1] << bu.a[j] /\ x .<- bu.a[i+1]) }


  let lemma outside_ordered_intervals (bu : bound_union) (x : real)
    requires { length bu.a > 0 }
    requires { x .<- bu.a[0] \/ x ->. bu.a[length bu.a - 1] }
    ensures { not (mem_union x bu) }
  = ()


  let lemma not_empty_union (bu:bound_union)
    requires { length bu.a > 0 }
    ensures { exists x. mem_union x bu }
  =
    assert { exists x. mem_r_interval x bu.a[0] }

  let predicate starts_before_strict (i j : bound_interval)
  = any bool ensures { result <-> V.(
      i.lower < j.lower \/
      (i.lower = j.lower /\ not j.lower_closed /\ i.lower_closed)
  )}
  let predicate (<=|) = starts_before_strict

  use real.RealInfix

  let predicate ends_after_strict (i j : bound_interval)
  = any bool ensures { result <-> V.(
      j.upper < i.upper \/
      (i.upper = j.upper /\ not j.upper_closed /\ i.upper_closed)
  )}
  let predicate (|=>) = ends_after_strict

  let lemma gap_not_empty (i j : bound_interval)
    requires { i <=| j}
    ensures { exists x. mem_r_interval x i /\ x .<- j }
  =
    let x = V.(
      let up = if i.upper < j.lower then i.upper else j.lower in
      if i.lower < j.lower then (i.lower.real +. up.real)/.2.
      else i.lower.real
    ) in assert { mem_r_interval x i}

  let lemma gap_not_empty' (i j : bound_interval)
    requires { i |=> j}
    ensures { exists x. mem_r_interval x i /\ x ->. j }
  =
    let x = V.(
      let r = if j.upper < i.lower then i.lower else j.upper in
      if j.upper < i.upper then (i.upper.real +. r.real)/.2.
      else i.upper.real
    ) in assert { mem_r_interval x i}

  let lemma gap_not_empty'' (i j k : bound_interval)
    requires { j |=> i }
    requires { i << k }
    requires { not i << j }
    ensures { exists x. mem_r_interval x j /\ x .<- k /\ x ->. i }
  =
    let x = V.(
      if i.upper < k.lower && i.upper < j.upper then
        let r = if k.lower < j.upper then k.lower else j.upper in
        (i.upper.real +. r.real)/.2.0
      else if i.upper < k.lower then j.upper.real
      else if i.upper < j.upper then i.upper.real
      else j.upper.real
    ) in assert {mem_r_interval x j /\ x .<- k /\ x ->. i}


  let function incl_interval_union (int : bound_interval) (bu: bound_union)
    ensures { result <-> (forall x. (mem_r_interval x int -> mem_union x bu)) }
    ensures { result <-> (exists i. 0 <= i < bu.a.length /\ incl_interval int bu.a[i]) }
  =
    let ref i = 0 in
    while i < length bu.a && bu.a[i] << int do
      variant { length bu.a - i }
      invariant { 0 <= i <= length bu.a }
      invariant { forall j. 0 <= j < i -> bu.a[j] << int}
      i <- i+1
    done;
    if i = length bu.a || length bu.a = 0 then
      begin
        assert { forall j. 0 <= j < length bu.a -> disj_r_interval bu.a[j] int };
        assert { forall x. mem_r_interval x int -> not mem_union x bu };
        assert { not (forall x. (mem_r_interval x int -> mem_union x bu)) };
        false
      end
    else if int << bu.a[i] then
      begin
        assert { forall j. 0 <= j < i -> disj_r_interval bu.a[j] int };
        assert { forall j. i <= j < length bu.a ->
                 (disj_r_interval int bu.a[j] by int << bu.a[j]) };
        assert { forall x. mem_r_interval x int -> not mem_union x bu };
        assert { length bu.a > 0 };
        assert { exists x. mem_union x bu };
        assert { not (forall x. (mem_r_interval x int -> mem_union x bu)) };
        false
      end
    else begin
      if incl_interval int bu.a[i] then true
      else
        begin
          assert {
            if int <=| bu.a[i] then
              if i = 0 then
                (exists x. mem_r_interval x int /\ x .<- bu.a[0])
              else
                (exists x. mem_r_interval x int /\ x .<- bu.a[i] /\ x ->. bu.a[i-1])
            else (int |=> bu.a[i])
          };
          false
        end
    end

  let function incl_union (bu bu' : bound_union)
    ensures { result <-> forall x. (mem_union x bu -> mem_union x bu') }
    ensures { result <-> (forall i. 0 <= i < length bu.a ->
                     (exists j. 0 <= j < length bu'.a /\ incl_interval bu.a[i] bu'.a[j])
                     by incl_interval_union bu.a[i] bu' )}
  =
    let ref i = 0 in
    while i < length bu.a && incl_interval_union bu.a[i] bu' do
      invariant { 0 <= i <= length bu.a }
      invariant { forall j. 0 <= j < i -> incl_interval_union bu.a[j] bu' }
      variant { length bu.a - i }
      i <- i+1
    done;
    i = length bu.a

  let ghost bound_union_ext_aux (int:bound_interval) (bu:bound_union)
    requires { incl_interval_union int bu }
  = any int ensures {
      0 <= result < length bu.a /\
      incl_interval int bu.a[result]
  }

  let lemma bound_union_ext_aux' (int:bound_interval) (u:bound_union) (i j:int)
    requires { 0 <= i < length u.a /\ 0 <= j < length u.a }
    requires { incl_interval int u.a[i] /\ incl_interval int u.a[j] }
    ensures { i = j }
  = ()

  let lemma bound_union_ext_aux'' (bu bu' : bound_union)
    requires { incl_union bu bu' }
    requires { incl_union bu' bu }
    ensures { length bu.a <= length bu'.a }
    ensures { forall i. 0 <= i < length bu.a -> bu.a[i] = bu'.a[i] }
  =
    for i = 0 to length bu.a - 1 do
      invariant { i <= length bu'.a }
      invariant { forall j. 0 <= j < i -> bu.a[j] = bu'.a[j] }
      let k = bound_union_ext_aux bu.a[i] bu' in
      let k' = bound_union_ext_aux bu'.a[k] bu in
      assert { k' = i /\ bu.a[i] = bu'.a[k] };
      if k < i then begin
        assert { bu.a[k] = bu'.a[k] };
        assert { bu.a[k] << bu.a[i] };
      end else if k > i then begin
        let j = bound_union_ext_aux bu'.a[k-1] bu in
        if j < i then begin
          assert { bu'.a[k-1] = bu.a[j] = bu'.a[j] };
          assert { j < k - 1 };
          assert { bu'.a[j] << bu'.a[k-1] };
        end else if j = i then begin
          assert {bu'.a[k] = bu.a[i] = bu'.a[k-1]};
          assert { bu'.a[k-1] << bu'.a[k] };
        end else if j > i then begin
          assert { bu'.a[k] = bu.a[i] << bu.a[j] = bu'.a[k-1] (*<< bu.a[k]*) };
        end
      end
    done

  let predicate bound_union_weak_eq (bu bu' : bound_union) = any bool
    ensures { result <-> weak_array_eq bu.a bu'.a }

  lemma bound_union_weak_ext : forall bu bu'.
    (incl_union bu bu' /\ incl_union bu' bu) <->
    bound_union_weak_eq bu bu'

  let function empty_union()
    ensures { forall x. not mem_union x result }
    ensures { length result.a = 0 }
  = {a=empty()}

  let function singleton_union (q : V.t) : bound_union
    ensures { forall x. mem_union x result <-> x = q.V.real }
    ensures { union_sup result = q = union_inf result }
  = { a = make 1 (singleton_mk q) }

  let disjoint_unions (bu bu': bound_union)
    ensures { result <-> forall x. not(mem_union x bu' /\ mem_union x bu) }
  =
     let bu'' = inter_union bu bu' in
     bound_union_weak_eq bu'' (empty_union())

   let function op_si_interval (op : V.op) (int : bound_interval) : bound_interval
     requires { V.si op }
     ensures { forall x. mem_r_interval x int
                     <-> mem_r_interval (op.V.ur x) result }
     ensures { result.lower=op.V.uq int.lower }
     ensures { result.upper=op.V.uq int.upper }
     ensures { result.lower_closed=int.lower_closed }
     ensures { result.upper_closed=int.upper_closed }
   =
     { int with lower=op.V.uq int.lower; upper=op.V.uq int.upper }

   lemma op_si_interval_order : forall op i j.
     V.si op -> (i << j <-> op_si_interval op i << op_si_interval op j)

   let function op_sd_interval (op : V.op) (int : bound_interval) : bound_interval
     requires { V.sd op }
     ensures { forall x. mem_r_interval x int
                     <-> mem_r_interval (op.V.ur x) result }
     ensures { result.lower=op.V.uq int.upper }
     ensures { result.upper=op.V.uq int.lower }
     ensures { result.lower_closed=int.upper_closed }
     ensures { result.upper_closed=int.lower_closed }
   =
     { lower=op.V.uq int.upper; upper=op.V.uq int.lower;
       lower_closed=int.upper_closed; upper_closed=int.lower_closed }

   lemma op_sd_interval_order : forall op i j.
     V.sd op -> (i << j <-> op_sd_interval op j << op_sd_interval op i)

   let function op_si_union (op : V.op) (bu : bound_union) : bound_union
     requires { V.si op }
     ensures { forall x. mem_union x bu <-> mem_union (op.V.ur x) result }
     ensures { length bu.a > 0 -> V.(union_inf result = op.V.uq (union_inf bu)) }
     ensures { length bu.a > 0 -> V.(union_sup result = op.V.uq (union_sup bu)) }
     (* ensures { forall x. mem_union x result <-> *)
     (*                     (exists y. mem_union y bu /\ x = op.V.ur x) } *)
   = { a = map bu.a (op_si_interval op) }

  lemma op_sd_union_aux : forall a x.
    gen_mem_union x a <-> gen_mem_union x (rev a)

  let op_sd_union (op : V.op) (bu : bound_union) : bound_union
    requires { V.sd op }
    ensures { forall x. mem_union x bu <-> mem_union (op.V.ur x) result }
  =
    let res = map bu.a (op_sd_interval op) in
    { a = rev res }


  let cube_union (bu : bound_union) : bound_union
    ensures { forall x. mem_union x bu <-> mem_union (x*.x*.x) result }
  =
    let op = { V.ur=(fun x -> x*.x*.x); V.uq=(fun q -> V.(q*q*q))} in
    op_si_union op bu

  (* TODO : talk about val neg in report *)
  let neg_union (bu : bound_union) : bound_union
    ensures { forall x. mem_union x bu <-> mem_union (0.0 -. x) result }
  =
    let op = { V.ur=(fun x -> 0.0 -. x); V.uq=(fun q -> V.neg q)} in
    op_sd_union op bu

  let mul_cst_union (c : V.t) (bu : bound_union) : bound_union
    ensures { forall x. mem_union x bu -> mem_union (x *. c) result }
  =
    let op = { V.ur=( *.) c.V.real; V.uq=V.((*) c) } in
    if V.(c < c-c) then
      begin
        assert { c.V.real <. 0.0 }; (* just a hint for efficiency *)
        op_sd_union op bu
      end
    else if V.(c-c < c) then
      op_si_union op bu
    else (* c = 0 *)
      { a = make 1 (singleton_mk c) }

  let function op_nsi_interval (op : V.op) (int : bound_interval) : bound_interval
    requires { V.nsi op }
    ensures { forall x. mem_r_interval x int
                      -> mem_r_interval (op.V.ur x) result }
    ensures { result.lower=op.V.uq int.lower }
    ensures { result.upper=op.V.uq int.upper }
    ensures { result.lower_closed=true }
    ensures { result.upper_closed=true }
  =
    { lower=op.V.uq int.lower; upper=op.V.uq int.upper;
      lower_closed=true; upper_closed=true }

  lemma op_nsi_interval_order : forall op i j.
    V.nsi op -> (i << j -> let f = op_nsi_interval op in f i <== f j /\ f j ==> f i)

  let op_nsi_union (op : V.op) (bu : bound_union) : bound_union
    requires { V.nsi op }
    ensures { forall x. mem_union x bu -> mem_union (op.V.ur x) result }
   = lax_to_strict { lax_a = (map bu.a (op_nsi_interval op)) }

  use real.Truncate  use real.FromInt

  let ceil_union (bu : bound_union) : bound_union
    ensures { forall x. mem_union x bu -> mem_union (from_int (ceil x)) result }
  =
    let op = { V.ur=(fun x -> from_int (ceil x)); V.uq=(fun q -> V.(of_int (ceil q))) } in
    assert { forall x x'. x<=.x' -> from_int (ceil x) <=. from_int (ceil x') };
    op_nsi_union op bu

  let floor_union (bu : bound_union) : bound_union
    ensures { forall x. mem_union x bu -> mem_union (from_int (floor x)) result }
  =
    let op = { V.ur=(fun x -> from_int (floor x)); V.uq=(fun q -> V.(of_int (floor q))) } in
    assert { forall x x'. x<=.x' -> from_int (floor x) <=. from_int (floor x') };
    op_nsi_union op bu

  let truncate_union (bu : bound_union) : bound_union
    ensures { forall x. mem_union x bu -> mem_union (from_int (truncate x)) result }
  =
    let op = { V.ur=(fun x -> from_int (truncate x)); V.uq=(fun q -> V.(of_int (truncate q))) } in
    assert { forall x x'. x<=.x' -> from_int (truncate x) <=. from_int (truncate x') };
    op_nsi_union op bu

  function relu (x:real) : real = if x >=. 0.0 then x else 0.0
  let relu_union (bu : bound_union) : bound_union
    ensures { forall x. mem_union x bu -> mem_union (relu x) result }
  =
    let op = { V.ur=relu;
               V.uq=(fun q -> V.(if (q-q) <= q then q else (q-q))) }
    in
    assert { forall x x'. x<=.x' ->  relu x <=. relu x' };
    op_nsi_union op bu

  lemma help : forall x bu. (x <. (union_inf bu).V.real) -> not mem_union x bu
  lemma help' : forall x bu. (x >. (union_sup bu).V.real) -> not mem_union x bu
  let lemma help'' (bu : bound_union)
    requires { bu.a.length > 0 }
    requires { union_sup bu = union_inf bu }
    ensures { bu.a.length = 1 }
    ensures { bu.a[0].lower = bu.a[0].upper }
  = ()


end
