(*module Q : Intf
    use real.Real
    use real.RealInfix
    
    type t = {
      p : int
      q : int
    } ensures { q <> 0 }
    
    function real (x : t) : real = x.p /. x.q

    
    predicate equal (a b : real) = (a.real = b.real)
    predicate (<=) (a:real) (b:real) = (a.real <=. b.real)
    predicate (<) (a:real) (b:real) = (a.real <. b.real)
    
    let (=) a b = a.p /. a.q = b.p /. b.q
    let (<=) (a b : real) : bool = (a <= b)
    let (<) = (<)
    
    
    use real.Abs
    let abs (a:t) : t = abs a
    ensures { result.real = abs a.real }

    type ord = Eq | Lt | Gt
    val compare (a:t) (b:t) : ord
        ensures {
            match result with
            | Eq -> equal a b | Lt -> a < b | Gt -> b < a
            end
        }

    let function (+) (a:t) (b:t) : t ensures { a.real +. b.real = result.real }
      = a +. b
    let function (-) (a:t) (b:t) : t ensures { a.real -. b.real = result.real }
      = a -. b
    let function (*) (a:t) (b:t) : t ensures { a.real *. b.real = result.real }
      = a *. b

    val function (/) (a:t) (b:t) : t
        requires { b.real <> 0.0 }
        ensures { result.real = a.real /. b.real }

    use real.Truncate
    use real.FromInt

    let function of_int (i : int) : t = (from_int i)

    function truncate (a : real) : int = Truncate.truncate a
    function floor (a:t) : int = Truncate.floor a
    function ceil (a:t) : int = Truncate.ceil a
end*)


(*module Q : Intf
    use real.Real
    use real.RealInfix
    
    type t = {
      p : int
      q : int
    } ensures { q <> 0 }
    
    function real (x : t) : real = x.p /. x.q

    
    predicate equal (a b : real) = (a.real = b.real)
    predicate (<=) (a:real) (b:real) = (a.real <=. b.real)
    predicate (<) (a:real) (b:real) = (a.real <. b.real)
    
    let (=) a b = a.p /. a.q = b.p /. b.q
    let (<=) (a b : real) : bool = (a <= b)
    let (<) = (<)
    
    
    use real.Abs
    let abs (a:t) : t = abs a
    ensures { result.real = abs a.real }

    type ord = Eq | Lt | Gt
    val compare (a:t) (b:t) : ord
        ensures {
            match result with
            | Eq -> equal a b | Lt -> a < b | Gt -> b < a
            end
        }

    let function (+) (a:t) (b:t) : t ensures { a.real +. b.real = result.real }
      = a +. b
    let function (-) (a:t) (b:t) : t ensures { a.real -. b.real = result.real }
      = a -. b
    let function (*) (a:t) (b:t) : t ensures { a.real *. b.real = result.real }
      = a *. b

    val function (/) (a:t) (b:t) : t
        requires { b.real <> 0.0 }
        ensures { result.real = a.real /. b.real }

    use real.Truncate
    use real.FromInt

    let function of_int (i : int) : t = (from_int i)

    function truncate (a : real) : int = Truncate.truncate a
    function floor (a:t) : int = Truncate.floor a
    function ceil (a:t) : int = Truncate.ceil a
end*)

(*module Q : Intf
    use real.Real
    use real.RealInfix
    
    type t = {
      p : int
      q : int
    } ensures { q <> 0 }
    
    function real (x : t) : real = x.p /. x.q

    
    predicate equal (a b : real) = (a.real = b.real)
    predicate (<=) (a:real) (b:real) = (a.real <=. b.real)
    predicate (<) (a:real) (b:real) = (a.real <. b.real)
    
    let (=) a b = a.p /. a.q = b.p /. b.q
    let (<=) (a b : real) : bool = (a <= b)
    let (<) = (<)
    
    
    use real.Abs
    let abs (a:t) : t = abs a
    ensures { result.real = abs a.real }

    type ord = Eq | Lt | Gt
    val compare (a:t) (b:t) : ord
        ensures {
            match result with
            | Eq -> equal a b | Lt -> a < b | Gt -> b < a
            end
        }

    let function (+) (a:t) (b:t) : t ensures { a.real +. b.real = result.real }
      = a +. b
    let function (-) (a:t) (b:t) : t ensures { a.real -. b.real = result.real }
      = a -. b
    let function (*) (a:t) (b:t) : t ensures { a.real *. b.real = result.real }
      = a *. b

    val function (/) (a:t) (b:t) : t
        requires { b.real <> 0.0 }
        ensures { result.real = a.real /. b.real }

    use real.Truncate
    use real.FromInt

    let function of_int (i : int) : t = (from_int i)

    function truncate (a : real) : int = Truncate.truncate a
    function floor (a:t) : int = Truncate.floor a
    function ceil (a:t) : int = Truncate.ceil a
end*)

(*

Turambar — 15/01/2025 10:34
L'énoncé du projet est en partie faux, pour ceux qui viendraient pas
Pour les fonctions strictement (dé)croissantes, la correction c'est "pour tout x, x € U -> op(x) € result" avec U l'union d'intervalle, et la complétude c'est montrer l'équivalence
le problème étant qu'une fonction croissante préserve pas nécessairement les intervalles

*)


  (*let ghost ndisj_carac_aux1 (i j : bound_interval) : real
    requires {ndisj_interval i j}
    ensures { mem_r_interval result i /\ mem_r_interval result j }
  =
    let (i,j) = if lax_before_interval i j then (i, j) else (j, i) in
    if V.(i.upper = j.lower) then
      i.upper.V.real
    else
      let y = V.(if i.upper <= j.upper then i.upper else j.upper) in
      V.(y.real +. j.lower.real)/. 2.

  let lemma ndisj_carac_aux2 (i j : bound_interval)
    requires {ndisj_interval i j}
    ensures {not disj_r_interval i j}
  = let _ = ndisj_carac_aux1 i j in ()*)


        (* assert { forall x. mem_r_interval x inter <-> *)
        (*                    mem_r_interval x int /\ mem_r_interval x a[i] }; *)
        (* label H in tmp <- replace_by_one tmp inter (length tmp) (length tmp); *)
        (* assert { forall x. gen_mem_union x tmp <-> *)
        (*                    gen_mem_sub_union x tmp 0 (length tmp - 1) \/ gen_mem_sub_union x tmp (length tmp - 1) (length tmp)}; *)
        (* assert { forall x. gen_mem_sub_union x tmp 0 (length tmp - 1) <-> gen_mem_union x (tmp at H) }; *)
        (* assert { tmp[length tmp - 1] = inter }; *)
        (* assert { forall x. gen_mem_sub_union x tmp (length tmp - 1) (length tmp) <-> mem_r_interval x inter }; *)
        (* assert { forall x. gen_mem_union x tmp <-> *)
        (*                    gen_mem_union x (tmp at H) \/ mem_r_interval x inter } *)


  let rec lemma csort_aux_1 (a b: array elt) (i j k l: int)
    requires { 0 <= i <= k <= l < j <= length a }
    requires { forall n. i <= n < j -> le a[l] a[n] }
    requires { exchange a b k l }
    ensures { forall n. i <= n < j -> le b[k] b[n] }
  =
    ()



    let ref i = 0 in
    while i < length result.a do
      variant { length result.a - i }
      invariant { 0 <= i <= length result.a }
      invariant { forall x. x <> e -> (mem_union x result <-> mem_union x bu) }
      invariant { not gen_mem_sub_union e result.a 0 i }
      invariant { forall j. 0<=j<result.a.length-1 -> result.a[j] << result.a[j+1] }
      let int = result.a[i] in
      let new_a = if not mem_interval e int then copy result.a else
        if V.(int.lower = int.upper) then
          replace result.a (empty()) i (i+1)
        else if V.(int.lower < e < int.upper) then
          let int, int' = except_interval_inside int e in
          let nw = make 2 int in let _ = nw[1]<-int' in
          let res = (replace (result.a) nw i (i+1)) in
          res
        else if V.((e=int.lower&&int.lower_closed)
                 ||(e=int.upper&&int.upper_closed)) then begin
          replace (result.a) (make 1 (except_interval_border int e)) i (i+1)
        end else
          copy result.a
      in result <- { a=new_a };
      i <- i + 1
    done;



LOG of my assertion debugging
  let gen_except_union (a : array bound_interval) (e : V.t)
    ensures { forall x.
              ((gen_mem_union x a /\ x<>e) <-> gen_mem_union x result) }
  =
    let ref res = empty () in
    for i = 0 to length a - 1 do
      invariant { forall x. ( (gen_mem_sub_union x a 0 i /\ x<>e) <->
                              (gen_mem_union x res) ) }

      assert { forall x. ( (gen_mem_sub_union x a 0 (i+1) /\ x<>e) <->
                               ( (gen_mem_sub_union x a 0 i/\x<>e)
                                  \/(mem_r_interval x a[i]/\x<>e)) ) };

      if not mem_interval e a[i] then
        begin
          res <- (append res (make 1 a[i]));
          assert { forall x. ((mem_r_interval x a[i] /\ x<>e) ->
                     (gen_mem_union x res by mem_r_interval x res[length res - 1])) };
          (* assert { forall x. gen_mem_union x res -> *)
          (*          ((gen_mem_sub_union x a 0 i /\ x<>e)\/(mem_r_interval x a[i])) }; *)
          (* assert { forall x. ( (gen_mem_sub_union x a 0 (i+1) /\ x<>e) <-> *)
          (*                     (gen_mem_union x res) ) } *)
        end
      else if V.(a[i].lower = a[i].upper) then
        begin
          (*assert { forall x. ( (gen_mem_sub_union x a 0 (i+1) /\ x<>e) <->
                               (gen_mem_union x res) ) } *)
        end
      else if mem_interval_border e a[i] then
        begin
          let nint = except_interval_border a[i] e in
          (*assert { forall x. ( (mem_r_interval x a[i] /\ x<>e) <->
                               (mem_r_interval x nint) ) };*)
          res <- append res (make 1 nint);
          assert { forall x. mem_r_interval x a[i] /\ x <> e -> gen_mem_union x res
                             by mem_r_interval x res[length res - 1] };
          (*assert { forall x. ( ( (gen_mem_sub_union x a 0 i/\x<>e)
                                  \/(mem_r_interval x a[i]/\x<>e)) ->
                                  (gen_mem_union x res) ) } *)
        end
      else if mem_interval_inside e a[i] then
        begin
          let int,int' = except_interval_inside a[i] e in
          (*assert { forall x. (mem_r_interval x a[i] /\ x <> e) <->
            (mem_r_interval x int \/mem_r_interval x int' ) };*)
          res <- append res (make 1 int);
          res <- append res (make 1 int');
          assert { let j = length res - 2 in
                   forall x. (mem_r_interval x a[i]/\x<>e) <->
                             (mem_r_interval x res[j]\/mem_r_interval x res[j+1]) };
          (*assert { forall x. ( (gen_mem_sub_union x a 0 (i+1) /\ x<>e) <->
                   (gen_mem_union x res) ) }*)
        end
    done;
    res



  let lemma gap_not_empty'' (i j k : bound_interval)
    requires { j |=> i }
    requires { i << k }
    requires { not i << j }
    ensures { exists x. mem_r_interval x j /\ x .<- k /\ x ->. i }
  =
    let x =
      if V.((i.upper < k.lower) && i.upper < j.upper) then V.(
        let r = if k.lower < j.upper then k.lower else j.upper in
        (i.upper.real +. r.real)/.2.0
        (*assert {mem_r_interval x j /\ x .<- k /\ x ->. i}*)
      ) else if V.(i.upper < k.lower) then V.(
        j.upper.real
        (*assert {mem_r_interval x j /\ x .<- k /\ x ->. i}*)
      ) else if V.(i.upper < j.upper) then V.(
        i.upper.real
        (*assert {mem_r_interval x j /\ x .<- k /\ x ->. i}*)
      ) else V.(
        j.upper.real
        (*assert { not i.upper_closed by (i << k /\ i.upper = k.lower /\ k.lower <= i.upper)};
        assert { not k.lower_closed };
        assert { i.upper = j.upper by j |=> i /\ j.upper <= i.upper };
        assert {mem_r_interval x j /\ x .<- k /\ x ->. i}*)
      )
    in assert {mem_r_interval x j /\ x .<- k /\ x ->. i}
FIRST WORKING VERSION OF THIS LEMMA


  lemma before_disj_r_interval : forall i j : bound_interval.
    disj_r_interval i j <-> (
        before_interval i j
     \/ beofre_interval j i
     \/ V.(i.upper = j.lower /\ not i.upper_closed /\ j.lower_closed)
     \/ V.(i.lower = j.upper /\ 
    )
